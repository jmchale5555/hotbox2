<?php include 'partials/header.view.php' ?>

<h4 class="text-center mb-4 text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-white">Admin panel</h4>
<p class="text-center mb-6 text-lg font-normal text-gray-500 lg:text-xl sm:px-16 xl:px-48 dark:text-gray-400">Welcome <?= $name ?></p>
<div x-data="adminForm">

  <div x-data="{ 
    rooms: <?php echo htmlspecialchars($rooms) ?>,
    selectedRoom: null,

    //async selectRoom(room) {
    //      this.selectedRoom = {...room}; // Create a copy of the rooms
          // ${room.id}
    //  },

      }">

      <div class="relative overflow-x-auto shadow-md rounded-lg">
          <table class="table w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 mb-12 ">
              <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                  <tr>
                      <th scope="col" class="px-6 py-3">
                          Room ID
                      </th>
                      <th scope="col" class="px-6 py-3">
                          Room name
                      </th>
                      <th scope="col" class="px-6 py-3">
                          Date added
                      </th>
                      <th scope="col" class="col-span-2 px-6 py-3">
                          Actions
                      </th>
                      <th scope="col" class="col-span-2 px-6 py-3">
                          
                      </th>
                  </tr>
              </thead>
              <template x-for="room in rooms.filter((_, index) => index > 0)" :key="room.id">
                  <tbody class="even:bg-gray-50 odd:bg-gray-300 even:dark:bg-slate-700 odd:dark:bg-slate-800 border-gray-200 dark:border-gray-700">

                      <tr class="table-row rounded-lg">
                          <td scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white" x-text="room.id">
                          </td>
                          <td scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white" x-text="room.room_name">
                          </td>
                          <td class="px-6 py-4" x-text="room.created_at">

                          </td>
                          <td class="px-6 py-4">
                              <a href="#" @click.prevent="selectRoom(room)" button data-modal-target="crud-modal" data-modal-toggle="crud-modal" class="font-medium text-blue-600 dark:text-blue-500 hover:underline">Edit</a>
                          </td>
                          <td class="px-6 py-4">
                              <a href="#" class="font-medium text-blue-600 dark:text-blue-500 hover:underline">Delete</a>
                          </td>
                      </tr>
                  </tbody>
              </template>
          </table>
    <!-- Modal starts -->
    <div id="crud-modal" 
        x-show="selectedRoom !== null"
        tabindex="-1"
        aria-hidden="true"
        class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
        <!-- Modal content -->
        <div class="relative p-4 w-full max-w-md max-h-full">
            <div class="relative bg-white rounded-lg shadow-sm dark:bg-gray-700">
                <!-- Modal header -->
                <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600 border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                        Edit Room
                    </h3>
                    <button type="button" 
                          @click="selectedRoom = null"
                          class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-target="crud-modal" data-modal-toggle="crud-modal">
                        <svg aria-hidden="true" class="w-3 h-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                        </svg>
                        <span class="sr-only">Close</span>
                    </button>
                </div>
 
            <!-- Modal form with two-way binding -->
            <template x-if="selectedRoom">
                <form class="p-4 md:p-5" @submit.prevent="submitForm">
                    <div class="grid gap-4 mb-4 grid-cols-2">
                        <!-- Hidden room id form field -->
                        <div class="col-span-2">
                            <input type="hidden" name="id" id="id" x-model="formData.id">
                        </div>
 
                        <!-- Room name form field -->
                        <div class="col-span-2">
                            <label for="room_name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Room Name</label>
                            <input type="text" name="room_name" id="room_name" 
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" 
                                placeholder="Room name" required
                                x-model="formData.room_name">
                            <div x-show="errors.room_name" class="text-red-500 text-sm mt-1" x-text="errors.room_name"></div>
                        </div>

                        <!-- Desk total form field -->
                        <div class="col-span-2">
                            <label for="desk_total" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Number of Desks</label>
                            <input type="number" name="desk_total" id="desk_total" 
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" 
                                placeholder="Number of desks"
                                x-model="formData.desk_total">
                            <div x-show="errors.desk_total" class="text-red-500 text-sm mt-1" x-text="errors.desk_total"></div>
                        </div>

                        <!-- Status message (shows success or error -->
                       <template x-if="message" class="col-span-2">
                            <div class="col-span-2" x-init="setTimeout(() => message = '', 3000)"
                                :class="{'text-green-500': !hasError, 'text-red-500': hasError}"
                                x-text="message">
                            </div>
                        </template>
 
                    <button type="submit" :disabled="isSubmitting" class="float-right min-w-max text-white !bg-gradient-to-br !from-purple-600 !to-blue-500 !hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg text-sm px-5 py-2 text-center my-3 me-2 mb-2">
                        <span x-show="!isSubmitting">Update Room</span>
                        <span x-show="isSubmitting">Saving...</span>
                    </button>
                </form>
            </template>
          </div>
        </div>
    </div>
</div>
<!-- </div> -->
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('adminForm', () => ({
            formData: {
                id: "",
                room_name: "",
                desk_total: ""
            },
            errors: {},
            message: '',
            hasError: false,
            isSubmitting: false,
            showDeleteModal: false,
            roomToDelete: null,

            // Initialize formData when a room is selected
            async selectRoom(room) {
                this.selectedRoom = {...room}; // Create a copy of the room
                
                // Initialize formData with the selected room data
                this.formData = {
                    id: room.id,
                    room_name: room.room_name,
                    desk_total: room.desk_total
                };
                
                console.log("Form data initialized:", this.formData);
            },

            async submitForm() {
                this.isSubmitting = true;
                this.errors = {};
                this.message = '';
                
                console.log("Submitting form data:", this.formData);
                
                try {
                    const response = await fetch('admin/amendDesks', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.content
                        },
                        body: JSON.stringify(this.formData)
                    });

                    const result = await response.json();
                    console.log("Server response:", result);
                    
                    if (result.success) {
                        this.hasError = false;
                        this.message = result.message || 'Room updated successfully!';
                        
                        // Update the room in the local array to reflect changes
                        if (Array.isArray(this.rooms)) {
                            this.rooms = this.rooms.map(r => 
                                r.id === this.formData.id ? {...r, ...this.formData} : r
                            );
                        }
                        
                        // Close the modal
                        //this.selectedRoom = null;
                    } else {
                        this.hasError = true;
                        this.errors = result.errors || {};
                        this.message = result.message || 'An error occurred';
                    }
                } catch (error) {
                    console.error('Error:', error);
                    this.hasError = true;
                    this.message = 'An error occurred while updating the room.';
                } finally {
                    this.isSubmitting = false;
                }
            },

            // Methods below not yet implemented 30-mar-25
            
            openDeleteModal(roomId) {
                this.roomToDelete = roomId;
                this.showDeleteModal = true;
            },

            async confirmDelete() {
                if (!this.roomToDelete) return;
                
                try {
                    const response = await fetch(`admin/deleteRoomById/${this.roomToDelete}`);
                    const result = await response.json();
                    
                    if (result.success) {
                        this.message = 'Room deleted successfully!';
                        this.hasError = false;
                        
                        // Update local array
                        if (Array.isArray(this.rooms)) {
                            this.rooms = this.rooms.filter(room => room.id !== this.roomToDelete);
                        }
                    } else {
                        this.message = result.message || 'An error occurred while deleting the room.';
                        this.hasError = true;
                    }
                    
                    this.showDeleteModal = false;
                    this.roomToDelete = null;
                } catch (error) {
                    console.error('Error:', error);
                    this.message = 'An error occurred while deleting the room.';
                    this.hasError = true;
                }
            }
        }));
    });
</script>

<?php include 'partials/footer.view.php' ?>
